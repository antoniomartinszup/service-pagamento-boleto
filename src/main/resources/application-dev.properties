server.port=8087

# Postgres
spring.datasource.url=${DATABASE_URL:jdbc:tracing:postgresql://localhost:5437/pagamento}
spring.datasource.driver-class-name=io.opentracing.contrib.jdbc.TracingDriver
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:pagamento123}
spring.datasource.driverclassname=org.postgresql.Driver

# Jpa
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#kafka
topic.name=${KAFKA_TOPIC:email}
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

############## METRICS / PROMETHEUS #################
management.endpoints.web.exposure.include=info, health, metrics, prometheus

# actuator
management.endpoint.health.show-details=always
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

# Jaeger - Habilita ou nao
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do servico
opentracing.jaeger.service-name=${NOME_APLICACAO:Pagamento-Boleto}

# Jaeger - Endereco para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilistico) e sua configuracao (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}
